Using JWT for generating Auth Tokens

-JWT libary insallation
"npm install jsonwebtoken"

#use jwt.io to understand 3 parts of JWT - headers, payload, signature

--Signing of JWT
"jwt.sign(payload,secret)" this return a token

--verifying a JWT token
"jwt.verify(token,secret)" this returns decoded value of payload

Password Hashing
we can use library like "bcrypt" to hash password, so they are not stored in plain text format.

Installation
npm install bcrypt

Hashing
bcrypt.hashSync(userProvidedPassword, saltRounds)

Verfying Password
bcrypt.compareSync(loginPassword, AlreadyHashedPassword)

return true or false based on verification of password.


SESSION MIDDLEWARE
sesion middleware is used to store session variable for each user on server side. This middleware can make use of any data storage depending on settings. By defalut it stored session variable in Memory (RAM)

"npm install express-session"

var server = express()
const session = require('express-session')
server.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }   // make secure : true incase you are using HTTPS
}))

-Now you can use req.session object to store any value for a particular user in server session. This value will not interact with similar variable of other users.


server.get('/user', function(req, res) {
  if (req.session.views) {
    req.session.views++
    res.json({views:req.session.views})
  } else {
    req.session.views = 1
    res.send('welcome to the session demo. refresh!')
  }
})

